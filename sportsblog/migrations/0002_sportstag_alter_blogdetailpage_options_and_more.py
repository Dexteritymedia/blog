# Generated by Django 4.2.3 on 2023-09-25 00:07

import core.blocks
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        ('sportsblog', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SportsTag',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('taggit.tag',),
        ),
        migrations.AlterModelOptions(
            name='blogdetailpage',
            options={'verbose_name': 'Sports Blog Post', 'verbose_name_plural': 'Sports Blog Posts'},
        ),
        migrations.AlterModelOptions(
            name='blogindexpage',
            options={'verbose_name': 'Sports blog', 'verbose_name_plural': 'Sports blog'},
        ),
        migrations.AlterModelOptions(
            name='bloglistingpage',
            options={'verbose_name': 'Sports Blog Category', 'verbose_name_plural': 'Sports Blog Categories'},
        ),
        migrations.AlterField(
            model_name='blogdetailpage',
            name='body',
            field=wagtail.fields.StreamField([('h2', wagtail.blocks.CharBlock(form_classname='title', icon='title', template='blocks/streamfield/heading2_block.html')), ('h3', wagtail.blocks.CharBlock(form_classname='title', icon='title', template='blocks/streamfield/heading3_block.html')), ('h4', wagtail.blocks.CharBlock(form_classname='title', icon='title', template='blocks/streamfield/heading4_block.html')), ('intro', wagtail.blocks.RichTextBlock(icon='pilcrow', template='blocks/streamfield/intro_block.html')), ('paragraph', wagtail.blocks.RichTextBlock(icon='pilcrow', template='blocks/streamfield/paragraph_block.html')), ('aligned_image', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('alignment', core.blocks.ImageFormatChoiceBlock()), ('caption', wagtail.blocks.CharBlock()), ('attribution', wagtail.blocks.CharBlock(required=False))], label='Aligned image', template='blocks/streamfield/aligned_image_block.html')), ('wide_image', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock())], label='Wide image', template='blocks/streamfield/wide_image_block.html')), ('bustout', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.blocks.RichTextBlock())], template='blocks/streamfield/bustout_block.html')), ('pullquote', wagtail.blocks.StructBlock([('quote', wagtail.blocks.CharBlock(form_classname='quote title')), ('attribution', wagtail.blocks.CharBlock())], template='blocks/streamfield/pullquote_block.html')), ('raw_html', wagtail.blocks.RawHTMLBlock(icon='code', label='Raw HTML', template='blocks/streamfield/raw_html_block.html')), ('mailchimp_form', wagtail.blocks.RawHTMLBlock(icon='code', label='Mailchimp embedded form', template='blocks/streamfield/mailchimp_form_block.html')), ('embed', wagtail.embeds.blocks.EmbedBlock(group='Media', icon='code', template='blocks/streamfield/embed_block.html'))], null=True, use_json_field=True),
        ),
        migrations.AlterField(
            model_name='blogdetailpage',
            name='call_to_action',
            field=wagtail.fields.StreamField([('key_points_summary', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock()), ('intro', wagtail.blocks.CharBlock()), ('link', wagtail.blocks.PageChooserBlock())]), help_text='Please add a minumum of 4 and a maximum of 6 key points.', icon='list-ul', max_num=6, min_num=4, template='blocks/streamfield/key_points_summary.html')), ('testimonials', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('quote', wagtail.blocks.CharBlock(form_classname='quote title')), ('name', wagtail.blocks.CharBlock()), ('role', wagtail.blocks.CharBlock()), ('link', wagtail.blocks.StreamBlock([('internal_link', wagtail.blocks.StructBlock([('page', wagtail.blocks.PageChooserBlock()), ('link_text', wagtail.blocks.CharBlock(required=False))])), ('external_link', wagtail.blocks.StructBlock([('link_url', wagtail.blocks.URLBlock(label='URL')), ('link_text', wagtail.blocks.CharBlock())]))], required=False))]), icon='openquote', template='blocks/streamfield/testimonial_block.html')), ('clients', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('link', wagtail.blocks.StreamBlock([('internal_link', wagtail.blocks.StructBlock([('page', wagtail.blocks.PageChooserBlock()), ('link_text', wagtail.blocks.CharBlock(required=False))])), ('external_link', wagtail.blocks.StructBlock([('link_url', wagtail.blocks.URLBlock(label='URL')), ('link_text', wagtail.blocks.CharBlock())]))], required=False))]), icon='site', label='Clients logo', template='blocks/streamfield/client-logo-block.html')), ('embed_plus_cta', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock()), ('intro', wagtail.blocks.CharBlock()), ('link', wagtail.blocks.PageChooserBlock(required=False)), ('external_link', wagtail.blocks.URLBlock(label='External Link', required=False)), ('button_text', wagtail.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(label='Youtube Embed', required=False))], icon='code', label='Embed + CTA', template='blocks/streamfield/embed_plus_cta_block.html')), ('cta', wagtail.blocks.StructBlock([('text', wagtail.blocks.CharBlock(help_text='Words in  &lt;span&gt; tag will display in a contrasting colour.')), ('link', wagtail.blocks.StreamBlock([('internal_link', wagtail.blocks.StructBlock([('page', wagtail.blocks.PageChooserBlock()), ('link_text', wagtail.blocks.CharBlock(required=False))])), ('external_link', wagtail.blocks.StructBlock([('link_url', wagtail.blocks.URLBlock(label='URL')), ('link_text', wagtail.blocks.CharBlock())]))]))], icon='plus-inverse', template='blocks/streamfield/cta.html'))], blank=True, null=True, use_json_field=True),
        ),
        migrations.CreateModel(
            name='BlogPostPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='sportsblog.blogdetailpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogdetailpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='sportsblog.BlogPostPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
